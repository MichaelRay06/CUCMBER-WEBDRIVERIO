
Feature: Testing Amazon searching feature

  //Background:
  //  Given I am on amazone site
 

    Scenario Outline: As a user, I should be able to search for ice-works 5000 product
        Given I am on amazone site
     When I handle cookies visibility
      When I search for <searchProduct>
      When the search results are displayed
      Then the search results has the <expectedSearchProduct> in it

    Examples:
      | searchProduct | expectedSearchProduct |            
      | Iceworks 5000 | Iceworks 5000         | 



  @basketTotal
  Scenario Outline: Check basket total
     Given I am on amazone site
    When I handle cookies visibility
    When I search for <searchProduct>
    When the search results was displayed click on
    Then I add iceworks product to my basket
    When I check my basket total
    Then it should match the price of the item added into basket


    Examples:
      | searchProduct |
      | Iceworks 5000 |

      //////////////////////////////////////basket total//////////////////
      
const {Given,When,Then} =require ('cucumber')

/* var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
var expect = chai.expect;
var assert = chai.assert;
var should = chai.should(); */



import thisBasePage from '../pageobjects/BasePage';
import thisHomePage  from '../pageobjects/HomePage';
import thisProductDisplayedPage from '../pageobjects/ProductDisplayedPage';
import thisAddToBasketPage  from '../pageobjects/AddToBasketPage';
import thisbasketValuePage from '../pageobjects/BasketValuePage';




Given(/^I am on amazone site$/, async () =>{

  thisBasePage.open ('https://www.amazon.co.uk/')
       });

When(/^I handle cookies visibility$/, () => {
  thisProductDisplayedPage.handleCookies();

});



When(/^I search for (.*)$/, (searchProduct) => {
  thisHomePage.getMenuSearchBox(searchProduct)

});;



When(/^the search results was displayed click on$/, () => {
  thisProductDisplayedPage.selectProduct();

});



Then(/^I add iceworks product to my basket$/, () => {
  thisAddToBasketPage.getAddToBasketLink();
});



When(/^I check my basket total$/, () => {
  var totalItemsExpected = thisbasketValuePage.getBasketTotal();
  console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' + totalItemsExpected)
  // assert.isAtLeast(totalItemsExpected,   1 , 'Total items value not grater than 1')
  // expect(totalItemsExpected).toHaveText('1')

});


Then(/^it should match the price of the item added into basket$/, () => {
  var totalPriceExpected = thisbasketValuePage.getPriceTotal();
  console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' + totalPriceExpected)
  // expect(totalPriceExpected).toHaveText('£19.97')
  //  assert.equal(totalPriceExpected,  '£19.97')
});



///////////////////////////////////AMAZONE SEARCH /////////////////////////////////////// 

const {Given,When,Then} =require ('cucumber')

/* var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
var expect = chai.expect;
var assert = chai.assert;
var should = chai.should(); */


import thisBasePage from '../pageobjects/BasePage';
import thisHomePage  from '../pageobjects/HomePage';
import thisproductDisplayedPage from '../pageobjects/ProductDisplayedPage';





Given(/^I am on amazone site$/, async () =>{

  thisBasePage.open ('https://www.amazon.co.uk/')
       });

When(/^I handle cookies visibility$/, () => {
 thisproductDisplayedPage.handleCookies();


});


When(/^I search for (.*)$/, (searchProduct) => {
 thisHomePage.getMenuSearchBox(searchProduct)
});

When(/^the search results are displayed$/, async () => {
expect (thisproductDisplayedPage.productDisplayed).toBeDisplayed();
  //assert.equal(true, flag, 'not displayed')
 
  // expect(flag).to.be.true();
  //expect(flag).to.equal(true);
  //  flag.should.equal(true);
  // assert.equal(true, flag, 'not displayed')
});



Then(/^the search results has the ([^"]*) in it$/, (expectedSearchProduct) => {
 var actualSearchProduct = thisproductDisplayedPage.searchProduct()
  expect(actualSearchProduct).toHaveTextContaining(expectedSearchProduct);
 // chaiExpect(actualSearchProduct).to.include(expectedSearchProduct);
  // expect(expectedSearchProduct).to.eventually.equal(productSearch);
  //assert.to.eventually.equal(expectedSearchProduct, productSearch );
  //assert.equal(expectedSearchProduct, productSearch);
});